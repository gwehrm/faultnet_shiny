shiny::runApp()
runApp()
library(shinydashboard)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shinyauthr::runExample("shinydashboard")
install.packages("shinyauthr")
shinyauthr::runExample("shinydashboard")
install.packages("RSQLite")
shinyauthr::runExample("shinydashboard")
install.packages("sodium")
install.packages("sodium")
list.files(path = path, pattern = "*.R", full.names = TRUE)
source_files <- function(path) {
# source R files in specified path
list.files(path = path, pattern = "*.R", full.names = TRUE)
lapply(list.files, source)
}
source_files <- function(path) {
# source R files in specified path
list.files(path = path, pattern = "*.R", full.names = TRUE)
lapply(list.files, source)
}
getwd()
source_files(path = "C:/Users/gabor/Documents/Repos/faultnet_R")
path = "C:/Users/gabor/Documents/Repos/faultnet_R"
list.files(path = path, pattern = "*.R", full.names = TRUE)
files <- list.files(path = path, pattern = "*.R", full.names = TRUE)
files
files <- list.files(path = path, pattern = "*.R ", full.names = TRUE)
files <- list.files(path = path, pattern = "*.R$", full.names = TRUE)
source_files <- function(paths) {
# source R files in specified path
for (path in paths) {
files <- list.files(path = path,
pattern = "*.R$",
full.names = TRUE,
recursive = TRUE)
lapply(files, source)
}
}
source_files(path = "C:/Users/gabor/Documents/Repos/faultnet_R")
source("C:/Users/gabor/Documents/Repos/faultnet_R/helper/helper_functions.R")
source_files(c("./modules/", "./helper/"))
runApp()
runApp()
user_base <- tibble::tibble(
user = c("user1", "user2"),
password = c("pass1", "pass2"),
permissions = c("admin", "standard"),
name = c("User One", "User Two")
)
runApp()
source("C:/Users/gabor/Documents/Repos/faultnet_R/helper/helper_functions.R")
source_files(c("./modules/", "./helper/"))
runApp()
runApp()
runApp()
input$tabs
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(bnlearn)
cptA <-  matrix(c(0.4, 0.6), ncol = 2, dimnames = list(NULL, c("LOW", "HIGH")))
cptA
cptB <-  matrix(c(0.8, 0.2), ncol = 2, dimnames = list(NULL, c("GOOD", "BAD")))
cptB
cptC <-  c(0.5, 0.5, 0.4, 0.6, 0.3, 0.7, 0.2, 0.8)
dim(cptC) = c(2, 2, 2)
dimnames(cptC) = list("C" = c("TRUE", "FALSE"), "A" =  c("LOW", "HIGH"),"B" = c("GOOD", "BAD"))
cptC
net <- model2network("[A][B][C|A:B]")
dfit <- custom.fit(net, dist = list(A = cptA, B = cptB, C = cptC))
dfit
plot(net)
plot(dfit)
net <- model2network("[A][B][C|A:B][D")
net <- model2network("[A][B][C|A:B][D]")
plot(net)
net <- model2network("[A:D][B][C|A:B][D]")
plot(net)
net <- model2network("[A:D][B][C|A:B][D]")
net <- model2network("[A|D][B][C|A:B][D]")
plot(net)
net <- model2network("[A][B][C|A:B]")
dfit <- custom.fit(net, dist = list(A = cptA, B = cptB, C = cptC))
predict(dfit)
predict(dfit, "C", "A=LOW")
evidence <- data.frame(A = c("LOW"),
B = C("BAD"))
predict(dfit, "C", evidence)
evidence <- data.frame(A = c("LOW"),
B = C("BAD"))
predict(dfit, "C", evidence)
evidence <- data.frame(A = c("LOW"),
B = C("BAD"))
evidence <- data.frame(A = c("LOW"),
B = c("BAD"))
predict(dfit, "C", evidence)
View(evidence)
predict(dfit, "C", evidence)
net <- model2network("[A][B][C|A:B]")
dfit <- custom.fit(net, dist = list(A = cptA, B = cptB, C = cptC))
evidence <- data.frame(A = c("LOW"),
B = c("BAD"))
predict(dfit, "C", evidence)
dfit$A
dfit$B
dfit$C
predict(dfit, node = "C", evidence)
cpquery(dfit, evidence = (A == "LOW") & (B == "BAD"))
cpquery(dfit, event = (C == "FALSE"), evidence = (A == "LOW") & (B == "BAD"))
cpquery(dfit, event = (C == "TRUE"), evidence = (A == "LOW") & (B == "BAD"))
cpquery(dfit, event = (C == "TRUE"), evidence = (C == "TRUE") & (B == "BAD"))
cpquery(dfit, event = (C == "TRUE"), evidence = (C == "LOW") & (B == "BAD"))
cpquery(dfit, event = (C == "TRUE"), evidence = (A == "LOW") & (B == "BAD"))
cpquery(dfit, event = (C == "TRUE"), evidence = (A == "LOW") & (B == "BAD"))
cpquery(dfit, event = (C == "TRUE"), evidence = (A == "LOW") & (B == "BAD"))
cpquery(dfit, event = (C == "TRUE"), evidence = (A == "LOW") & (B == "BAD"))
cpquery(dfit, event = (C == "TRUE"), evidence = (A == "LOW") & (B == "BAD"))
cpquery(dfit, event = (C == "TRUE"), evidence = (A == "LOW") & (B == "BAD"))
cpquery(dfit, event = (C == "TRUE"), evidence = (A == "LOW") & (B == "BAD"))
cpquery(dfit, event = (C == "TRUE"), evidence = (A == "LOW") & (B == "BAD"))
cpquery(dfit, event = (C == "TRUE"), evidence = (A == "LOW") & (B == "BAD"))
cpquery(dfit, event = (C == "TRUE"), evidence = (A == "LOW") & (B == "BAD"))
cpquery(dfit, event = (C == "TRUE"), evidence = (A == "LOW") & (B == "BAD"))
cpquery(dfit, event = (C == "TRUE"), evidence = (A == "LOW") & (B == "BAD"))
cpquery(dfit, event = (C == "TRUE"), evidence = (A == "LOW") & (B == "BAD"))
cpquery(dfit, event = (C == "TRUE"), evidence = (A == "LOW") & (B == "BAD"))
cpquery(dfit, event = (C == "TRUE"), evidence = (A == "LOW") & (B == "BAD"))
cpquery(dfit, event = (C == "TRUE"), evidence = (A == "LOW") & (B == "BAD"))
cpquery(dfit, event = (C == "TRUE"), evidence = (A == "LOW") & (B == "BAD"))
cpquery(dfit, event = (C == "TRUE"), evidence = (A == "LOW") & (B == "BAD"))
cpquery(dfit, event = (C == "TRUE"), evidence = (A == "LOW") & (B == "BAD"))
cpquery(dfit, event = (C == "TRUE"), evidence = (A == "LOW") & (B == "BAD"))
cpquery(dfit, event = (C == "TRUE"), evidence = (A == "LOW") & (B == "BAD"))
cpquery(dfit, event = (C == "TRUE")  & (C == "FALSE"), evidence = (A == "LOW") & (B == "BAD"))
cpquery(dfit, event = (C == "TRUE")  & (C == "TRUE"), evidence = (A == "LOW") & (B == "BAD"))
cpquery(dfit, event = (C == "TRUE")  & (B == "TRUE"), evidence = (A == "LOW") & (B == "BAD"))
cpquery(dfit, event = (C == "TRUE")  & (B == "BAD"), evidence = (A == "LOW") & (B == "BAD"))
cpquery(dfit, event = FALSE, evidence = (A == "LOW") & (B == "BAD"))
cpquery(dfit, event = TRUE, evidence = (A == "LOW") & (B == "BAD"))
install.packages("shinyWidgets")
library(shinyWidgets)
runApp()
runApp()
runApp()
runApp()
output$evidence_options <- renderUI(
dfit
)
dfit
str <- dfit
str(dfit)
length(dfit)
output$evidence_options <- renderUI(
dfit$
)
type(dfit)
str(dfit)
dfit$A$node
dfit$A$prob
dfit$A$children
dfit$A$prob
names(dfit$A$children)
str(dfit$A$children)
t <- (dfit$A$children)
t
names(dfit$A$prob)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(evidence)
runApp()
runApp()
View(evidence)
runApp()
runApp()
runApp()
input$A
runApp()
A <- input$A
B <- input$B
if (A != "keine Antwort" && B != "keine Antwort") {
prob_c <- cpquery(dfit, event = (C == "TRUE"), evidence = (A == A) & (B == B))
} else if (A != "keine Antwort" && B == "keine Antwort") {
prob_c <- cpquery(dfit, event = (C == "TRUE"), evidence = (A == A))
} else if (A == "keine Antwort" && B != "keine Antwort") {
prob_c <- cpquery(dfit, event = (C == "TRUE"), evidence = (B == B))
}
prob_c <- cpquery(dfit, event = (C == "TRUE"), evidence = (A == A) & (B == B))
prob_c <- cpquery(dfit, event = (C == "TRUE"), evidence = (A == A))
prob_c <- cpquery(dfit, event = (C == "TRUE"), evidence = (B == B))
prob_c <- cpquery(dfit, event = (C == "TRUE"))
prob_c <- dfit$C$prob[2]
runApp()
remotes::install_github("deepanshu88/summaryBox")
library(summaryBox)
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
input$tabs
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source("C:/Users/gabor/Documents/Repos/faultnet_R/helper/helper_functions.R")
source_files(c("./modules/", "./helper/"))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
cptA <-  matrix(c(0.4, 0.6), ncol = 2, dimnames = list(NULL, c("LOW", "HIGH")))
cptB <-  matrix(c(0.8, 0.2), ncol = 2, dimnames = list(NULL, c("GOOD", "BAD")))
cptC <-  c(0.5, 0.5, 0.4, 0.6, 0.3, 0.7, 0.2, 0.8)
dim(cptC) = c(2, 2, 2)
dimnames(cptC) = list("C" = c("TRUE", "FALSE"), "A" =  c("LOW", "HIGH"),"B" = c("GOOD", "BAD"))
cptC
cptA <-  matrix(c(0.1,0.3, 0.6), ncol = 3, dimnames = list(NULL, c("LOW","MEDIUM", "HIGH")))
cptB <-  matrix(c(0.8, 0.2), ncol = 2, dimnames = list(NULL, c("GOOD", "BAD")))
cptC <-  c(0.5, 0.5, 0.4, 0.6, 0.3, 0.7, 0.2, 0.8)
dim(cptC) = c(2, 2, 2)
dimnames(cptC) = list("C" = c("TRUE", "FALSE"), "A" =  c("LOW", "HIGH"),"B" = c("GOOD", "BAD"))
cptC
cptC <-  c(0.5, 0.5, 0.4, 0.6, 0.2, 0.8,  0.3, 0.7, 0.2, 0.8, 0.5, 0.5)
dim(cptC) = c(2, 3, 2)
dimnames(cptC) = list("C" = c("TRUE", "FALSE"), "A" =  c("LOW", "MEDIUM", "HIGH"),"B" = c("GOOD", "BAD"))
cptC
net <- model2network("[A][B][C|A:B]")
dfit <- custom.fit(net, dist = list(A = cptA, B = cptB, C = cptC))
runApp()
runApp()
library(bnlearn)
cptA <-  matrix(c(0.1,0.3, 0.6), ncol = 3, dimnames = list(NULL, c("LOW", "MEDIUM", "HIGH")))
cptB <-  matrix(c(0.8, 0.2), ncol = 2, dimnames = list(NULL, c("GOOD", "BAD")))
cptC <-  c(0.5, 0.5, 0.4, 0.6, 0.2, 0.8,  0.3, 0.7, 0.2, 0.8, 1, 0)
dim(cptC) = c(2, 3, 2)
dimnames(cptC) = list("C" = c("TRUE", "FALSE"), "A" =  c("LOW", "MEDIUM", "HIGH"),"B" = c("GOOD", "BAD"))
net <- model2network("[A][B][C|A:B]")
dfit <- custom.fit(net, dist = list(A = cptA, B = cptB, C = cptC))
cptC
runApp()
prob_c <- cpquery(dfit, event = (C == "TRUE"), evidence = (B == B))
B
runApp()
dfit$C$prob[2]
A != "keine Antwort" && B != "keine Antwort"
cpquery(dfit, event = (C == "TRUE"), evidence = (A == A) & (B == B))
prob_c <- cpquery(dfit, event = (C == "FALSE"), evidence = (A == A) & (B == B))
cptC
A= "MEDIUM"
B = "BAD"
prob_c <- cpquery(dfit, event = (C == "FALSE"), evidence = (A == A) & (B == B))
prob_c <- cpquery(dfit, event = (C == "TRUE"), evidence = (A == A) & (B == B))
A = "HIGH"
prob_c <- cpquery(dfit, event = (C == "TRUE"), evidence = (A == A) & (B == B))
## discrete Bayesian network (it is the same with ordinal nodes).
data(learning.test)
fitted = bn.fit(hc(learning.test), learning.test)
# the result should be around 0.025.
cpquery(fitted, (B == "b"), (A == "a"))
plot(fitted)
fitted
# programmatically build a conditional probability query...
var = names(learning.test)
obs = 2
str = paste("(", names(learning.test)[-3], " == '",
sapply(learning.test[obs, -3], as.character), "')",
sep = "", collapse = " & ")
str
str2 = paste("(", names(learning.test)[3], " == '",
as.character(learning.test[obs, 3]), "')", sep = "")
str2
cmd = paste("cpquery(fitted, ", str2, ", ", str, ")", sep = "")
eval(parse(text = cmd))
# ... but note that predict works better in this particular case.
attr(predict(fitted, "C", learning.test[obs, -3], prob = TRUE), "prob")
learning.test[obs, -3]
obs <- data.frame("A" = "HIGH",
"B" = "BAD")
obs
predict(dfit, "C", obs, prob = TRUE)
View(learning.test)
str(learning.test)
obs <- data.frame("A" = as.factor("HIGH"),
"B" = as.factor("BAD"))
predict(dfit, "C", obs, prob = TRUE)
obs <- data.frame("A" = as.factor("HIGH", levels = c("LOW", "MEDIUM", "HIGH")),
"B" = as.factor("BAD", levels = c("GOOD", "BAD")))
obs <- data.frame("A" = factor("HIGH", levels = c("LOW", "MEDIUM", "HIGH")),
"B" = factor("BAD", levels = c("GOOD", "BAD")))
predict(dfit, "C", obs, prob = TRUE)
predict(dfit, c("A", "B" "C"), obs, prob = TRUE)
predict(dfit, c("A", "B", "C"), obs, prob = TRUE)
predict(dfit, "B", obs, prob = TRUE)
predict(dfit, "C", obs, prob = TRUE)
attr(predict(dfit, "C", obs, prob = TRUE), "prob")
obs <- data.frame("A" = factor("HIGH", levels = c("LOW", "MEDIUM", "HIGH")))
attr(predict(dfit, "C", obs, prob = TRUE), "prob")
obs <- data.frame("A" = factor("HIGH", levels = c("LOW", "MEDIUM", "HIGH")),
"B" = factor("", levels = c("GOOD", "BAD")))
attr(predict(dfit, "C", obs, prob = TRUE), "prob")
library(rbgl)
install.packages("RBGL")
install.packages("gRbase")
install.packages("gRain")
install.packages("Rgraphviz")
# biocLite is not available for r 3.6 - therefore usage of BiocManager to install the packeages
library(RBGL)
library(gRbase)
library(gRain)
library(Rgraphviz)
lh <- c("low","high")
lmmh <- c("low","lower middle","upper middle","high")
eh <- cptable(~eh, values=c(3, 7), levels=lh)
oil.eh <- cptable(~oil|eh, values = c(3,7,6,4),levels = lh)
bp.oil <- cptable(~bp|oil, values = c(20,45,30,5, 20,50,20,10),levels = lmmh)
inf.oil.eh <- cptable(~inf|oil:eh, values = c(1,9,  6,4,  5,5,  4,6),levels = lh)
rt.inf.eh <- cptable(~rt|inf:eh, values = c(2,8,  6,4,  7,3,   2,8), levels = lh)
plist <- compileCPT(list(eh, oil.eh,bp.oil,inf.oil.eh,rt.inf.eh))
net <- grain(plist)
plot(net)
# biocLite is not available for r 3.6 - therefore usage of BiocManager to install the packeages
library(RBGL)
library(gRbase)
library(gRain)
install.packages("BiocManager")
install.packages("BiocManager")
BiocManager::install(c("RBGL", "gRbase". "gRain", "Rgraphviz"))
library(BiocManager)
BiocManager::install(c("RBGL", "gRbase". "gRain", "Rgraphviz"))
BiocManager::install(c("RBGL", "gRbase", "gRain", "Rgraphviz"))
# biocLite is not available for r 3.6 - therefore usage of BiocManager to install the packeages
library(RBGL)
library(gRbase)
library(gRain)
library(Rgraphviz)
lh <- c("low","high")
lmmh <- c("low","lower middle","upper middle","high")
eh <- cptable(~eh, values=c(3, 7), levels=lh)
oil.eh <- cptable(~oil|eh, values = c(3,7,6,4),levels = lh)
bp.oil <- cptable(~bp|oil, values = c(20,45,30,5, 20,50,20,10),levels = lmmh)
inf.oil.eh <- cptable(~inf|oil:eh, values = c(1,9,  6,4,  5,5,  4,6),levels = lh)
rt.inf.eh <- cptable(~rt|inf:eh, values = c(2,8,  6,4,  7,3,   2,8), levels = lh)
plist <- compileCPT(list(eh, oil.eh,bp.oil,inf.oil.eh,rt.inf.eh))
net <- grain(plist)
plot(net)
net_2 <- setEvidence(net,nodes = c("oil","ret"),states = c("low","low"))
querygrain(net_2,nodes = "bp")
net
querygrain(net_2,nodes = c("bp", "inf"))
gb <- c("good", "bad")
cptA <- cptable(~A, values = c(0.1, 0.3, 0.6), levels = lh)
cptB <- cptable(~B, values = c(0.8, 0.2), levels = )
cptC <- cptable(~C|A:B, values = c(0.5, 0.5, 0.4, 0.6, 0.2, 0.8,  0.3, 0.7, 0.2, 0.8, 1, 0), levels = gb)
plist <- compileCPT(list(cptA, cptB, cptC))
cptB <- cptable(~B, values = c(0.8, 0.2), levels = gb)
cptC <- cptable(~C|A:B, values = c(0.5, 0.5, 0.4, 0.6, 0.2, 0.8,  0.3, 0.7, 0.2, 0.8, 1, 0), levels = tf)
tf <- c("True", "False")
cptA <- cptable(~A, values = c(0.1, 0.3, 0.6), levels = lh)
cptB <- cptable(~B, values = c(0.8, 0.2), levels = gb)
cptC <- cptable(~C|A:B, values = c(0.5, 0.5, 0.4, 0.6, 0.2, 0.8,  0.3, 0.7, 0.2, 0.8, 1, 0), levels = tf)
plist <- compileCPT(list(cptA, cptB, cptC))
net <- grain(plist)
plot(net)
net
oil.eh <- cptable(~oil|eh, values = c(3,7,6,4),levels = lh)
bp.oil <- cptable(~bp|oil, values = c(20,45,30,5, 20,50,20,10),levels = lmmh)
inf.oil.eh <- cptable(~inf|oil:eh, values = c(1,9,  6,4,  5,5,  4,6),levels = lh)
rt.inf.eh <- cptable(~rt|inf:eh, values = c(2,8,  6,4,  7,3,   2,8), levels = lh)
plist <- compileCPT(list(eh, oil.eh,bp.oil,inf.oil.eh,rt.inf.eh))
net <- grain(plist)
plot(net)
for (i in plist){
print("--------------------")
print(i)
}
plist <- compileCPT(list(cptA, cptB, cptC))
net <- grain(plist)
plot(net)
for (i in plist){
print("--------------------")
print(i)
}
lmh <- c("low","medium", "high")
cptA <- cptable(~A, values = c(0.1, 0.3, 0.6), levels = lmh)
cptB <- cptable(~B, values = c(0.8, 0.2), levels = gb)
cptC <- cptable(~C|A:B, values = c(0.5, 0.5, 0.4, 0.6, 0.2, 0.8,  0.3, 0.7, 0.2, 0.8, 1, 0), levels = tf)
plist <- compileCPT(list(cptA, cptB, cptC))
net <- grain(plist)
plot(net)
for (i in plist){
print("--------------------")
print(i)
}
net
net_2 <- setEvidence(net,nodes = c("A"),states = c("low"))
querygrain(net_2, nodes = c("B", "C"))
net_2 <- setEvidence(net,nodes = c("A"),states = c("high"))
querygrain(net_2, nodes = c("B", "C"))
net_2 <- setEvidence(net,nodes = c("A", "B"),states = c("high", "bad"))
querygrain(net_2, nodes = c("B", "C"))
querygrain(net_2, nodes = c("A", "B", "C"))
net_2 <- setEvidence(net,nodes = c("A", "B"),states = c("high", "bad"))
querygrain(net_2, nodes = c("A", "B", "C"))
net_2 <- setEvidence(net,nodes = c("B"),states = c("bad"))
querygrain(net_2, nodes = c("A", "B", "C"))
net_2 <- setEvidence(net, nodes = c("A", "B"),states = c(A, B))
prob_c <- querygrain(net_2, nodes = c("A", "B", "C"))
prob_c
net$dag
net
names(net)
nodes(net)
str(net)
net$ug
names(net$ug)
View(net)
net[["dag"]]@nodes
net[["cptlist"]][["A"]]
names(net[["cptlist"]][["A"]])
prob_c
prob_c$C
prob_c$C[1]
unlist(prob_c$C[1])
net[["cptlist"]][["C"]]
net_2 <- setEvidence(net, nodes = c(),states = c())
net
for (i in plist){
print("--------------------")
print(i)
}
# biocLite is not available for r 3.6 - therefore usage of BiocManager to install the packeages
library(RBGL)
net[["dag"]]@edgeL[["C"]]
net[["dag"]]@edgeData@data[["A|C"]]
net[["dag"]]@edgeData@data[["B|C"]]
shiny::runApp()
library(shiny)
library(shinydashboard)
library(shinyWidgets)
library(htmltools)
library(shinydashboard)
library(shinyWidgets)
detach("package:htmltools", unload = TRUE)
library(htmlwidgets)
library(htmltools)
shiny::runApp()
library(rlang)
shiny::runApp()
detach("package:rlang", unload = TRUE)
install.packages(c("cachem", "cli", "digest", "htmltools", "httpuv", "jsonlite", "later", "magrittr", "mime", "Rcpp", "rlang", "sass", "shiny", "shinydashboard", "stringi"))
shiny::runApp()
